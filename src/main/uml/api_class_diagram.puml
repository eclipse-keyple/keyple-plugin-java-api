@startuml
title
    Keyple - keyple-plugin-java-api - 2.2.+ (2023-11-08)
end title

' == THEME ==

'Couleurs issues de : https://htmlcolorcodes.com/fr/tableau-de-couleur/tableau-de-couleur-design-plat/
!define C_GREY1 F8F9F9
!define C_GREY2 F2F3F4
!define C_GREY3 E5E7E9
!define C_GREY4 D7DBDD
!define C_GREY5 CACFD2
!define C_GREY6 BDC3C7
!define C_LINK 3498DB
!define C_USE 27AE60

' -- Styles that don't work with new version of plantuml --
skinparam stereotypeABorderColor #A9DCDF
skinparam stereotypeIBorderColor #B4A7E5
skinparam stereotypeCBorderColor #ADD1B2
skinparam stereotypeEBorderColor #EB93DF
' -- END --

skinparam ClassBorderThickness 2
skinparam ArrowThickness 2

' Yellow
skinparam ClassBackgroundColor #FEFECE
skinparam ClassBorderColor #D4AC0D
' Red
skinparam ClassBackgroundColor<<red>> #FDEDEC
skinparam ClassBorderColor<<red>> #E74C3C
hide <<red>> stereotype
' Purple
skinparam ClassBackgroundColor<<purple>> #F4ECF7
skinparam ClassBorderColor<<purple>> #8E44AD
hide <<purple>> stereotype
' blue
skinparam ClassBackgroundColor<<blue>> #EBF5FB
skinparam ClassBorderColor<<blue>> #3498DB
hide <<blue>> stereotype
' Green
skinparam ClassBackgroundColor<<green>> #E9F7EF
skinparam ClassBorderColor<<green>> #27AE60
hide <<green>> stereotype
' Grey
skinparam ClassBackgroundColor<<grey>> #EAECEE
skinparam ClassBorderColor<<grey>> #2C3E50
hide <<grey>> stereotype

' == CONTENT ==

package "org.eclipse.keyple.core.plugin" as api {
    +class "**final** PluginApiProperties" as ApiProperties <<green>> {
        +{static} **final** String VERSION
    }
    +interface AutonomousObservablePluginApi {
        +void onReaderConnected (Set<ReaderSpi> readers)
        +void onReaderDisconnected (Set<String> readerNames)
    }
    +interface "<color:red><s>WaitForCardInsertionAutonomousReaderApi" as WaitForCardInsertionAutonomousReaderApi {
        +<color:red><s>void onCardInserted ()
    }
    +interface "<color:red><s>WaitForCardRemovalAutonomousReaderApi" as WaitForCardRemovalAutonomousReaderApi {
        +<color:red><s>void onCardRemoved ()
    }
    +interface "<color:blue>CardInsertionWaiterAsynchronousApi" as CardInsertionWaiterAsynchronousApi {
        +<color:blue>void onCardInserted ()
    }
    +interface "<color:blue>CardRemovalWaiterAsynchronousApi" as CardRemovalWaiterAsynchronousApi {
        +<color:blue>void onCardRemoved ()
    }
    +class "<<Exception>>\n**final** PluginIOException" as PluginIOException <<green>> {
        +PluginIOException (String message)
        +PluginIOException (String message,
            \tThrowable cause)
    }
    +class "<<Exception>>\n**final** ReaderIOException" as ReaderIOException <<green>> {
        +ReaderIOException (String message)
        +ReaderIOException (String message,
            \tThrowable cause)
    }
    +class "<<Exception>>\n**final** CardIOException" as CardIOException <<green>> {
        +CardIOException (String message)
        +CardIOException (String message,
            \tThrowable cause)
    }
    +class "<<Exception>>\n**final** TaskCanceledException" as TaskCanceledException <<green>> {
        +TaskCanceledException (String message)
    }
    package spi {
        together {
            +interface PoolPluginFactorySpi <<red>> {
                +String getPluginApiVersion ()
                +String getCommonApiVersion ()
                +String getPoolPluginName ()
                +PoolPluginSpi getPoolPlugin ()
            }
            +interface PluginFactorySpi <<red>> {
                +String getPluginApiVersion ()
                +String getCommonApiVersion ()
                +String getPluginName ()
                +PluginSpi getPlugin ()
            }
            +interface PoolPluginSpi <<red>> {
                +String getName ()
                +SortedSet<String> getReaderGroupReferences ()
                +PoolReaderSpi</color> allocateReader (String readerGroupReference)
                +void releaseReader (ReaderSpi readerSpi)
                +void onUnregister ()
            }
            +interface PluginSpi <<red>> {
                +String getName ()
                +Set<ReaderSpi> searchAvailableReaders ()
                +void onUnregister ()
            }
        }
        +interface ObservablePluginSpi <<red>> extends PluginSpi {
            +int getMonitoringCycleDuration ()
            +Set<String> searchAvailableReaderNames ()
            +ReaderSpi searchReader (String readerName)
        }
        +interface AutonomousObservablePluginSpi <<red>> extends PluginSpi {
            --
            +<color:red><s>void connect (
                \t<color:red><s>AutonomousObservablePluginApi
                \t\t<color:red><s>autonomousObservablePluginApi)
            +<color:blue>void setCallback (
                \t<color:blue>AutonomousObservablePluginApi callback)
        }
        package reader {
            +interface ReaderSpi <<red>> {
                +String getName ()

                +void openPhysicalChannel ()
                +void closePhysicalChannel ()
                +boolean isPhysicalChannelOpen ()

                +boolean checkCardPresence ()
                +String getPowerOnData ()
                +byte[] transmitApdu (byte[] apduIn)
                +boolean isContactless ()
                +void onUnregister ()
            }
            +interface "PoolReaderSpi" as PoolReaderSpi <<red>> extends ReaderSpi {
                +Object getSelectedSmartCard ()
            }
            +interface ConfigurableReaderSpi <<red>> extends ReaderSpi {
                +boolean isProtocolSupported (String readerProtocol)
                +void activateProtocol (String readerProtocol)
                +void deactivateProtocol (String readerProtocol)
                +boolean isCurrentProtocol (String readerProtocol)
            }
            +interface AutonomousSelectionReaderSpi <<red>> extends ReaderSpi {
                +byte[] openChannelForAid (byte[] dfName, byte isoControlMask)
                +void closeLogicalChannel ()
            }
            package observable {
                +interface ObservableReaderSpi <<red>> extends api.spi.reader.ReaderSpi {
                    +void onStartDetection ()
                    +void onStopDetection ()
                }
                package state {
                    package processing {
                        +interface "<color:red><s>WaitForCardRemovalBlockingDuringProcessingSpi" as WaitForCardRemovalBlockingDuringProcessingSpi {
                            +<color:red><s>void waitForCardRemovalDuringProcessing ()
                            +<color:red><s>void stopWaitForCardRemovalDuringProcessing ()
                        }
                        +interface "<color:red><s>DontWaitForCardRemovalDuringProcessingSpi" as DontWaitForCardRemovalDuringProcessingSpi {
                        }
                    }
                    package insertion {
                        +interface "<color:red><s>WaitForCardInsertionBlockingSpi" as WaitForCardInsertionBlockingSpi <<red>> {
                            +<color:red><s>void waitForCardInsertion ()
                            +<color:red><s>void stopWaitForCardInsertion ()
                        }
                        +interface "<color:blue>CardInsertionWaiterBlockingSpi" as CardInsertionWaiterBlockingSpi <<red>> {
                            +<color:blue>void waitForCardInsertion ()
                            +<color:blue>void stopWaitForCardInsertion ()
                        }
                        +interface "<color:red><s>WaitForCardInsertionNonBlockingSpi" as WaitForCardInsertionNonBlockingSpi <<red>> {
                        }
                        +interface "<color:blue>CardInsertionWaiterNonBlockingSpi" as CardInsertionWaiterNonBlockingSpi <<red>> {
                            +<color:blue>int getCardInsertionMonitoringSleepDuration ()
                        }
                        +interface "<color:red><s>WaitForCardInsertionAutonomousSpi" as WaitForCardInsertionAutonomousSpi <<red>> {
                            --
                            +<color:red><s>void connect (
                                \t<color:red><s>WaitForCardInsertionAutonomousReaderApi
                                \t\t<color:red><s>waitForCardInsertionAutonomousReaderApi)
                        }
                        +interface "<color:blue>CardInsertionWaiterAsynchronousSpi" as CardInsertionWaiterAsynchronousSpi <<red>> {
                            --
                            +<color:blue>void setCallback (
                                \t<color:blue>CardInsertionWaiterAsynchronousApi callback)
                        }
                    }
                    package removal {
                        +interface "<color:red><s>WaitForCardRemovalBlockingSpi" as WaitForCardRemovalBlockingSpi <<red>> {
                            +<color:red><s>void waitForCardRemoval ()
                            +<color:red><s>void stopWaitForCardRemoval ()
                        }
                        +interface "<color:blue>CardRemovalWaiterBlockingSpi" as CardRemovalWaiterBlockingSpi <<red>> {
                            +<color:blue>void waitForCardRemoval ()
                            +<color:blue>void stopWaitForCardRemoval ()
                        }
                        +interface "<color:red><s>WaitForCardRemovalNonBlockingSpi" as WaitForCardRemovalNonBlockingSpi <<red>> {
                        }
                        +interface "<color:blue>CardRemovalWaiterNonBlockingSpi" as CardRemovalWaiterNonBlockingSpi <<red>> {
                            +<color:blue>int getCardRemovalMonitoringSleepDuration ()
                        }
                        +interface "<color:red><s>WaitForCardRemovalAutonomousSpi" as WaitForCardRemovalAutonomousSpi <<red>> {
                            --
                            +<color:red><s>void connect (
                                \t<color:red><s>WaitForCardRemovalAutonomousReaderApi
                                \t\t<color:red><s>waitForCardRemovalAutonomousReaderApi)
                        }
                        +interface "<color:blue>CardRemovalWaiterAsynchronousSpi" as CardRemovalWaiterAsynchronousSpi <<red>> {
                            --
                            +<color:blue>void setCallback (
                                \t<color:blue>CardRemovalWaiterAsynchronousApi callback)
                        }
                    }
                }
            }
        }
    }
}

' Associations

PluginFactorySpi .up.> ApiProperties #C_LINK : provide\nAPI version <
PluginFactorySpi ..> PluginSpi #C_LINK : provide >

PluginSpi ..> ReaderSpi #C_LINK : provide >

PoolPluginFactorySpi .up.> ApiProperties #C_LINK : provide\nAPI version <
PoolPluginFactorySpi ..> PoolPluginSpi #C_LINK : provide >

PoolPluginSpi ..> PoolReaderSpi #C_LINK : provide >

AutonomousObservablePluginSpi .up.> AutonomousObservablePluginApi #C_USE : use >

WaitForCardInsertionAutonomousSpi ..> WaitForCardInsertionAutonomousReaderApi #C_USE : use >
CardInsertionWaiterAsynchronousSpi ..> CardInsertionWaiterAsynchronousApi #C_USE : use >

WaitForCardRemovalAutonomousSpi ..> WaitForCardRemovalAutonomousReaderApi #C_USE : use >
CardRemovalWaiterAsynchronousSpi ..> CardRemovalWaiterAsynchronousApi #C_USE : use >

' == LAYOUT ==

ObservablePluginSpi -[hidden]- reader

AutonomousSelectionReaderSpi -[hidden]- ObservableReaderSpi

ObservableReaderSpi -[hidden]- state

WaitForCardInsertionBlockingSpi -[hidden]- WaitForCardInsertionNonBlockingSpi
WaitForCardInsertionNonBlockingSpi -[hidden]- WaitForCardInsertionAutonomousSpi

CardInsertionWaiterBlockingSpi -[hidden]- CardInsertionWaiterNonBlockingSpi
CardInsertionWaiterNonBlockingSpi -[hidden]- CardInsertionWaiterAsynchronousSpi

WaitForCardRemovalBlockingDuringProcessingSpi -[hidden]- DontWaitForCardRemovalDuringProcessingSpi

WaitForCardRemovalBlockingSpi -[hidden]- WaitForCardRemovalNonBlockingSpi
WaitForCardRemovalNonBlockingSpi -[hidden]- WaitForCardRemovalAutonomousSpi

CardRemovalWaiterBlockingSpi -[hidden]- CardRemovalWaiterNonBlockingSpi
CardRemovalWaiterNonBlockingSpi -[hidden]- CardRemovalWaiterAsynchronousSpi

' == STYLE ==

package api #C_GREY1 {}
package api.spi #C_GREY2 {}
package api.spi.reader #C_GREY3 {}
package api.spi.reader.observable #C_GREY4 {}
package api.spi.reader.observable.state #C_GREY5 {}
package api.spi.reader.observable.state.insertion #C_GREY6 {}
package api.spi.reader.observable.state.removal #C_GREY6 {}

@enduml